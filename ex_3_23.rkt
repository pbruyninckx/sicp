#lang sicp

(define (make-deque-item val prev next)
  (cons val (cons prev next)))
(define (val-deque-item item)
  (car item))
(define (prev-deque-item item)
  (car (cdr item)))
(define (next-deque-item item)
  (cddr item))
(define (set-next-deque-item! item next-item)
  (set-cdr! (cdr item) next-item))
(define (set-prev-deque-item! item prev-item)
  (set-car! (cdr item) prev-item))

(define (make-deque) (cons '() '()))
(define (front-deque-item q)
  (car q))
(define (rear-deque-item q)
  (cdr q))
(define (front-deque q)
  (val-deque-item (front-deque-item q)))
(define (set-front-deque-item! q new-front)
  (set-car! q new-front))
(define (set-rear-deque-item! q new-rear)
  (set-cdr! q new-rear))
(define (rear-deque q)
  (val-deque-item (rear-deque-item q)))
(define (empty-deque? q)
  (null? (car q)))

(define (front-insert-deque! q val)
  (if (empty-deque? q)
      (let ((new-item (make-deque-item val '() '())))
        (set-front-deque-item! q new-item)
        (set-rear-deque-item! q new-item)
        q)
      (let ((new-item (make-deque-item val '() (front-deque-item q))))
        (set-prev-deque-item! (front-deque-item q) new-item)
        (set-front-deque-item! q new-item)
        q)))

(define (rear-insert-deque! q val)
  (if (empty-deque? q)
      (let ((new-item (make-deque-item val '() '())))
        (set-front-deque-item! q new-item)
        (set-rear-deque-item! q new-item)
        q)
      (let ((new-item (make-deque-item val (rear-deque-item q) '())))
        (set-next-deque-item! (rear-deque-item q) new-item)
        (set-rear-deque-item! q new-item)
        q)))

(define (front-delete-deque! q)
  (cond ((empty-deque? q)
         (error "Cannot remove element from empty deque"))
        ((eq? (front-deque-item q) (rear-deque-item q))
         (set-front-deque-item! q '())
         (set-rear-deque-item! q '()))
        (else
         (set-front-deque-item! q (next-deque-item (front-deque-item q)))
         (set-prev-deque-item! (front-deque-item q) '())))q
  q)

(define (rear-delete-deque! q)
  (cond ((empty-deque? q)
         (error "Cannot remove element from empty deque"))
        ((eq? (front-deque-item q) (rear-deque-item q))
         (set-front-deque-item! q '())
         (set-rear-deque-item! q '()))
        (else
         (set-rear-deque-item! q (prev-deque-item (rear-deque-item q)))
         (set-next-deque-item! (rear-deque-item q) '())))
  q)
      